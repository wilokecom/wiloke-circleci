version: 2.1
references:
  docker_container: &docker_container
    docker:
      - image: circleci/php:7.4-node-browsers
      - image: circleci/mysql:5.7
        environment:
          MYSQL_DATABASE: wordpress
          MYSQL_USER: wordpress
          MYSQL_PASSWORD: 123456
          MYSQL_ROOT_PASSWORD: root
          MYSQL_TCP_PORT: 3306
          MYSQL_UNIX_PORT: 3306
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD  # context / project UI env-var reference
      - image: circleci/buildpack-deps:curl
  working_directory: &working_directory
    working_directory: ~/wiloke-circleci
  environment: &environment
    environment:
      WORKSPACE_ROOT: tmp/
      DB_NAME: wordpress
      DB_USER: wordpress
      DB_PASSWORD: 123456
      DB_HOST: 127.0.0.1
      WORKING_DIR: ~/var/www/html
      WP_ADMIN: admin
      WP_PASSWORD: admin
      WP_EMAIL: contact.wiloke@gmail.com
      WP_URL: http://localhost:8080
      PHP_ADDRESS: localhost:8080
      REST_BASE: wiloke/v1
      PLUGIN_NAME: wiloke-circleci
      TEST_NAMESPACE: WilokeCircleciTest
      NAMESPACE: WilokeCircleci
      PLUGIN_PATH: wp-content/plugins/wiloke-circleci
      PLUGINS_FOLDER_PATH: wp-content/plugins
jobs:
  build:
    <<: *environment
    <<: *docker_container
    <<: *working_directory
    steps:
      - run:
          name: Checking folder
          command: ls -la
      - checkout
#      - setup_remote_docker:
#          docker_layer_caching: true
#      - run:
#          name: Docker Build
#          command: docker build .
      - run:
          name: Checking folder
          command: ls -la
      - run:
          name: Installing Mysql
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Install MySQL CLI; #https://circleci.com/docs/2.0/postgres-config/
          command: sudo apt-get install default-mysql-client
      - run:
          name: Create Database
          command: mysql -h $DB_HOST -u root -proot -e "create database if not exists wordpress;"
      - run:
          name: Install MySQL client
          command: |
            sudo apt-get update && \
            sudo apt-get -y install \
              default-mysql-client \
              libjpeg-dev \
              libpng-dev \
              libzip-dev \
              libcurl4-gnutls-dev
      - run:
          name: Install MySQL PHP extension
          command: sudo docker-php-ext-install mysqli
      - run:
          name: Downloading & Installing WordPress
          command: .circleci/install-wp-cli.sh
      - run:
          name: WordPress Dir
          command: ls -la $PLUGINS_FOLDER_PATH
      - checkout:
          path: $PLUGIN_PATH
      - run:
          name: WordPress Dir
          command: ls -la $PLUGINS_FOLDER_PATH
      - run:
          name: Update Composer
          command: sudo composer self-update
      - restore_cache: # special step to restore the dependency cache if `composer.lock` does not change
          keys:
            - composer-v1-{{ checksum "composer.lock" }}
            # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
            - composer-v1-
      - run:
          name: Installing Composer
          command: cd $PLUGIN_PATH && composer install -n --prefer-dist
      - run:
          name: Generate autoload
          command: cd $PLUGIN_PATH && composer dump-autoload
      - run:
          name: Activating plugin
          command: .circleci/wp-plugin-activation.sh
      - run:
          name: Setting up PHP UNIT
          command: .circleci/wp-setup-phpunit.sh
      - persist_to_workspace:
          root: .
          paths: .
  test_phpunit:
#    machine:
#      docker_layer_caching: true
    <<: *docker_container
    <<: *working_directory
    <<: *environment
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install MySQL PHP extension
          command: sudo docker-php-ext-install mysqli && docker-php-ext-enable mysqli
      - run:
          name: Start PHP server
          command: sudo php -S $PHP_ADDRESS -t .
          background: true
      - run:
          name: Test folder
          command: |
            ls -la $PLUGIN_PATH && ls -la $PLUGIN_PATH/tests && ls -la $PLUGIN_PATH/vendor
      - run:
          name: Cat PHPUnit
          command: |
            cat $PLUGIN_PATH/phpunit.xml
      - run:
          name: Bin
          command: |
            ls -la $PLUGIN_PATH/vendor/bin
      - run:
          name: Cat phpunit
          command: |
            cat $PLUGIN_PATH/vendor/bin/phpunit
      - run:
          name: Adding 777 to bootstrap
          command: |
            chmod 777 $PLUGIN_PATH/tests/bootstrap.php
      - run:
          name: Running PHPUnit Test
          command: $CIRCLE_WORKING_DIRECTORY/$PLUGIN_PATH/vendor/bin/phpunit
workflows:
  version: 2
  build_test:
    jobs:
      - build
      - test_phpunit:
          requires:
            - build
